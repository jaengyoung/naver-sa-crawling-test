# name: Deploy lambda

# on:
#   push:
#     branches: [ "main" ]
#     paths:
#       - 'source/lambda/**'
#       - '.github/workflows/deploy-lambda.yml'

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     defaults:
#       run:
#         working-directory: source/lambda

#     env:
#       AWS_REGION: ${{ secrets.AWS_REGION }}
#       AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
#       ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
#       LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
#       IMAGE_TAG: latest
#       CACHE_TAG: cache

#     steps:
#       - name: Checkout the repository
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Assume IAM Role to get temporary credentials
#         id: assume-role
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         run: |
#           CREDS=$(aws sts assume-role \
#             --role-arn "$AWS_ROLE_ARN" \
#             --role-session-name "GitHubActionsSession" \
#             --query 'Credentials' --output json)

#           AWS_ACCESS_KEY_ID=$(echo "$CREDS" | jq -r '.AccessKeyId')
#           AWS_SECRET_ACCESS_KEY=$(echo "$CREDS" | jq -r '.SecretAccessKey')
#           AWS_SESSION_TOKEN=$(echo "$CREDS" | jq -r '.SessionToken')

#           echo "::add-mask::$AWS_ACCESS_KEY_ID"
#           echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
#           echo "::add-mask::$AWS_SESSION_TOKEN"

#           echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
#           echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
#           echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $GITHUB_ENV

#       - name: Get Account ID and Login to ECR
#         run: |
#           ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
#           echo "::add-mask::$ACCOUNT_ID"
#           echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
#           echo "ECR_REGISTRY=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com" >> $GITHUB_ENV

#           aws ecr get-login-password --region "$AWS_REGION" | \
#             docker login --username AWS --password-stdin "$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"

#       - name: Build and push with Registry Cache
#         uses: docker/build-push-action@v6
#         with:
#           context: source/lambda
#           push: true
#           tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.IMAGE_TAG }}
#           cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.CACHE_TAG }}
#           cache-to: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.CACHE_TAG }},mode=max
#           provenance: false
#           sbom: false

name: Deploy lambda

on:
  push:
    branches: [ "main" ]
    paths:
      - 'source/lambda/**'
      - '.github/workflows/deploy-lambda.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: source/lambda

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
      LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
      IMAGE_TAG: latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      # Docker Buildx 설정 (Summary를 위해 필요)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Assume IAM Role to get temporary credentials
        id: assume-role
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn "$AWS_ROLE_ARN" \
            --role-session-name "GitHubActionsSession" \
            --query 'Credentials' --output json)

          AWS_ACCESS_KEY_ID=$(echo "$CREDS" | jq -r '.AccessKeyId')
          AWS_SECRET_ACCESS_KEY=$(echo "$CREDS" | jq -r '.SecretAccessKey')
          AWS_SESSION_TOKEN=$(echo "$CREDS" | jq -r '.SessionToken')

          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          echo "::add-mask::$AWS_SESSION_TOKEN"

          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $GITHUB_ENV

      - name: Authenticate Docker to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          echo "::add-mask::$ACCOUNT_ID"
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV

          aws ecr get-login-password --region "$AWS_REGION" | \
            docker login --username AWS --password-stdin "$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"

      # 기존 방식이지만 build-push-action 사용 (Summary 제공)
      - name: Build and push to ECR
        uses: docker/build-push-action@v6
        with:
          context: source/lambda
          push: true
          tags: ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_NAME }}:${{ env.IMAGE_TAG }}
          provenance: false
          sbom: false