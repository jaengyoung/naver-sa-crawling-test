name: Deploy lambda

on:
  push:
    branches: [ "main" ]
    paths:
      # - 'source/**'
      - '.github/workflows/deploy-lambda.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: source/go

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
      LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
      IMAGE_TAG: latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Assume IAM Role to get temporary credentials
        id: assume-role
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn "$AWS_ROLE_ARN" \
            --role-session-name "GitHubActionsSession" \
            --query 'Credentials' --output json)

          AWS_ACCESS_KEY_ID=$(echo "$CREDS" | jq -r '.AccessKeyId')
          AWS_SECRET_ACCESS_KEY=$(echo "$CREDS" | jq -r '.SecretAccessKey')
          AWS_SESSION_TOKEN=$(echo "$CREDS" | jq -r '.SessionToken')

          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          echo "::add-mask::$AWS_SESSION_TOKEN"

          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $GITHUB_ENV

      - name: Authenticate Docker to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          echo "::add-mask::$ACCOUNT_ID"
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV

          aws ecr get-login-password --region "$AWS_REGION" | \
            docker login --username AWS --password-stdin "$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"

      - name: Build the Docker image
        run: |
          docker build -t "$ECR_REPOSITORY_NAME:$IMAGE_TAG" .

      - name: Tag the Docker image
        run: |
          docker tag "$ECR_REPOSITORY_NAME:$IMAGE_TAG" \
            "$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$IMAGE_TAG"

      - name: Push the Docker image to ECR
        run: |
          docker push "$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$IMAGE_TAG"

      - name: Update Lambda function
        run: |
          IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$IMAGE_TAG"

          aws lambda update-function-code \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --image-uri "$IMAGE_URI"

          echo "Waiting for Lambda function update to complete..."

          while true; do
            STATUS=$(aws lambda get-function \
              --function-name "$LAMBDA_FUNCTION_NAME" \
              --query 'Configuration.LastUpdateStatus' \
              --output text)

            if [ "$STATUS" = "Successful" ]; then
              echo "✅ Lambda update succeeded."
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "❌ Lambda update failed."
              exit 1
            else
              echo "ℹ️ Lambda status: $STATUS. Waiting..."
              sleep 5
            fi
          done